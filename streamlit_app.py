import streamlit as st
import pandas as pd
import numpy as np
from sentence_transformers import SentenceTransformer
import faiss
import os
import json
from datetime import datetime
import plotly.express as px

# Configuration de la page
st.set_page_config(
    page_title="GAIN - GenAISafety Agentic Intelligence Network", 
    page_icon="üõ°Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Styles personnalis√©s
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: 700;
        color: #1E3A8A;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.5rem;
        font-weight: 600;
        color: #2563EB;
        margin-bottom: 1rem;
    }
    .highlight {
        background-color: #DBEAFE;
        padding: 0.2rem;
        border-radius: 0.2rem;
    }
    .source-tag {
        background-color: #EFF6FF;
        color: #1E40AF;
        padding: 0.2rem 0.5rem;
        border-radius: 0.5rem;
        font-size: 0.8rem;
        font-weight: 500;
        margin-right: 0.5rem;
    }
    .result-card {
        background-color: white;
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 1rem;
        border: 1px solid #E5E7EB;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    .score-badge {
        background-color: #DBEAFE;
        color: #1E40AF;
        padding: 0.2rem 0.5rem;
        border-radius: 0.5rem;
        font-size: 0.8rem;
        font-weight: 500;
    }
    .sidebar-header {
        font-size: 1.2rem;
        font-weight: 600;
        color: #1E3A8A;
        margin-bottom: 0.5rem;
    }
    .footer {
        margin-top: 3rem;
        text-align: center;
        color: #6B7280;
        font-size: 0.8rem;
    }
    .metrics-container {
        display: flex;
        justify-content: space-between;
        margin-bottom: 1rem;
    }
    .metric-card {
        background-color: #F3F4F6;
        padding: 1rem;
        border-radius: 0.5rem;
        text-align: center;
        flex: 1;
        margin: 0 0.5rem;
    }
    .metric-value {
        font-size: 1.5rem;
        font-weight: 700;
        color: #1E3A8A;
    }
    .metric-label {
        font-size: 0.9rem;
        color: #4B5563;
    }
</style>
""", unsafe_allow_html=True)

# Chemin vers le dossier de donn√©es
DATA_DIR = "data"
EMBEDDINGS_PATH = os.path.join(DATA_DIR, "embeddings.npy")
METADATA_PATH = os.path.join(DATA_DIR, "metadata.json")
MODEL_NAME = "paraphrase-multilingual-MiniLM-L12-v2"  # Mod√®le multilingue pour supporter fran√ßais et anglais

# Fonctions utilitaires
@st.cache_resource
def load_model():
    """Charge le mod√®le de sentence embeddings"""
    return SentenceTransformer(MODEL_NAME)

@st.cache_data
def load_data():
    """Charge les donn√©es et pr√©pare l'index FAISS"""
    # Si les fichiers d'embeddings et de m√©tadonn√©es existent, les charger
    if os.path.exists(EMBEDDINGS_PATH) and os.path.exists(METADATA_PATH):
        embeddings = np.load(EMBEDDINGS_PATH)
        with open(METADATA_PATH, "r", encoding="utf-8") as f:
            metadata = json.load(f)
    else:
        # Sinon, utiliser des donn√©es factices pour la d√©monstration
        st.warning("‚ö†Ô∏è Donn√©es de d√©monstration charg√©es. Veuillez configurer le chemin vers vos donn√©es r√©elles.")
        embeddings, metadata = create_demo_data()
        
    # Cr√©er l'index FAISS
    dimension = embeddings.shape[1]
    index = faiss.IndexFlatIP(dimension)  # Utiliser le produit scalaire (cosine similarity)
    index.add(embeddings.astype(np.float32))
    
    # Extraire les sources uniques pour les filtres
    sources = sorted(list(set([item["source"] for item in metadata])))
    
    # Extraire les secteurs uniques pour les filtres (si disponibles)
    sectors = []
    if "sector" in metadata[0]:
        sectors = sorted(list(set([item["sector"] for item in metadata if "sector" in item])))
    
    return embeddings, metadata, index, sources, sectors

def create_demo_data():
    """Cr√©e des donn√©es de d√©monstration pour le d√©veloppement"""
    # Textes d'exemple
    texts = [
        "La CNESST recommande l'utilisation d'√©quipements de protection individuelle pour les travaux en hauteur.",
        "L'ASP Construction a publi√© un guide sur la pr√©vention des chutes sur les chantiers.",
        "L'IRSST a men√© une √©tude sur l'exposition aux poussi√®res dans le secteur de la construction.",
        "Le programme de pr√©vention de la CNESST inclut des mesures de contr√¥le des risques chimiques.",
        "Guide des bonnes pratiques en ergonomie pour le secteur manufacturier par l'IRSST.",
        "L'ASP Construction recommande des proc√©dures de travail s√©curitaires pour les travaux d'excavation.",
        "La CNESST a mis √† jour ses directives concernant la pr√©vention des troubles musculo-squelettiques.",
        "√âtude de l'IRSST sur la pr√©vention des risques psychosociaux dans le secteur de la sant√©.",
        "L'ASP Construction propose des fiches techniques sur l'utilisation s√©curitaire des √©chafaudages.",
        "La CNESST exige une formation ad√©quate pour les travailleurs manipulant des produits dangereux."
    ]
    
    # Sources d'exemple
    sources = ["CNESST", "ASP Construction", "IRSST", "CNESST", "IRSST", 
               "ASP Construction", "CNESST", "IRSST", "ASP Construction", "CNESST"]
    
    # Secteurs d'exemple
    sectors = ["Construction", "Construction", "Construction", "G√©n√©ral", "Manufacturier",
               "Construction", "G√©n√©ral", "Sant√©", "Construction", "G√©n√©ral"]
    
    # URLs fictives
    urls = [f"https://exemple.com/document_{i}" for i in range(1, 11)]
    
    # Cr√©er des embeddings al√©atoires (dimension 384 pour paraphrase-multilingual-MiniLM-L12-v2)
    embeddings = np.random.rand(len(texts), 384).astype(np.float32)
    embeddings = embeddings / np.linalg.norm(embeddings, axis=1, keepdims=True)  # Normaliser
    
    # Cr√©er les m√©tadonn√©es
    metadata = []
    for i in range(len(texts)):
        metadata.append({
            "id": i,
            "text": texts[i],
            "source": sources[i],
            "sector": sectors[i],
            "url": urls[i],
            "date_added": datetime.now().strftime("%Y-%m-%d")
        })
    
    return embeddings, metadata

def search_documents(query, index, metadata, model, top_k=10, source_filter=None, sector_filter=None):
    """Recherche s√©mantique dans les documents"""
    # Encoder la requ√™te
    query_embedding = model.encode([query])[0]
    query_embedding = query_embedding / np.linalg.norm(query_embedding)  # Normaliser
    
    # Effectuer la recherche
    k = min(top_k * 3, index.ntotal)  # Rechercher plus de r√©sultats pour permettre le filtrage
    scores, indices = index.search(np.array([query_embedding]).astype(np.float32), k=k)
    
    # Filtrer et formater les r√©sultats
    results = []
    for i, idx in enumerate(indices[0]):
        if idx == -1:  # Faiss retourne -1 si moins de k r√©sultats sont trouv√©s
            continue
            
        item = metadata[idx]
        
        # Appliquer les filtres
        if source_filter and item["source"] not in source_filter:
            continue
            
        if sector_filter and ("sector" in item and item["sector"] not in sector_filter):
            continue
            
        # Ajouter le score de similarit√©
        result = item.copy()
        result["score"] = float(scores[0][i])
        results.append(result)
        
        # Arr√™ter une fois que nous avons assez de r√©sultats apr√®s filtrage
        if len(results) >= top_k:
            break
    
    return results

def highlight_query_terms(text, query_terms, max_length=300):
    """Met en √©vidence les termes de la requ√™te dans le texte et tronque si n√©cessaire"""
    query_terms = query_terms.lower().split()
    
    # Tronquer le texte si n√©cessaire
    if len(text) > max_length:
        # Trouver la premi√®re occurrence d'un terme de recherche
        first_pos = len(text)
        for term in query_terms:
            pos = text.lower().find(term)
            if pos != -1 and pos < first_pos:
                first_pos = pos
        
        # D√©terminer les limites de la troncature
        start = max(0, first_pos - 100)
        end = min(len(text), start + max_length)
        
        # Ajuster pour ne pas couper un mot
        if start > 0:
            start = text.rfind(" ", 0, start) + 1
        
        if end < len(text):
            end = text.rfind(" ", end - 50, end)
            if end == -1:  # Si pas d'espace trouv√©
                end = min(len(text), start + max_length)
        
        truncated_text = ("..." if start > 0 else "") + text[start:end] + ("..." if end < len(text) else "")
    else:
        truncated_text = text
    
    # Mettre en √©vidence les termes de recherche
    highlighted_text = truncated_text
    for term in query_terms:
        if len(term) > 2:  # Ignorer les termes trop courts
            pattern = term
            replacement = f"<span class='highlight'>{term}</span>"
            highlighted_text = highlighted_text.replace(pattern, replacement)
            # Aussi essayer avec la premi√®re lettre en majuscule
            pattern_cap = term.capitalize()
            replacement_cap = f"<span class='highlight'>{pattern_cap}</span>"
            highlighted_text = highlighted_text.replace(pattern_cap, replacement_cap)
    
    return highlighted_text

def format_results(results, query):
    """Formate les r√©sultats pour l'affichage"""
    if not results:
        st.info("Aucun r√©sultat trouv√© pour cette requ√™te. Essayez de modifier vos termes de recherche ou vos filtres.")
        return
    
    for result in results:
        with st.container():
            st.markdown(f"""
            <div class="result-card">
                <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 0.5rem;">
                    <div>
                        <span class="source-tag">{result['source']}</span>
                        {f'<span class="source-tag">{result["sector"]}</span>' if 'sector' in result else ''}
                    </div>
                    <span class="score-badge">Score: {result['score']:.2f}</span>
                </div>
                <div style="margin-bottom: 0.5rem;">
                    {highlight_query_terms(result['text'], query)}
                </div>
                <div style="text-align: right;">
                    <a href="{result['url']}" target="_blank" style="color: #2563EB; text-decoration: none; font-size: 0.8rem;">
                        Voir la source originale ‚Üí
                    </a>
                </div>
            </div>
            """, unsafe_allow_html=True)

def display_source_distribution(metadata, source_filter=None):
    """Affiche la distribution des sources dans les donn√©es"""
    # Compter les occurrences de chaque source
    source_counts = {}
    for item in metadata:
        source = item["source"]
        if source_filter and source not in source_filter:
            continue
        source_counts[source] = source_counts.get(source, 0) + 1
    
    # Cr√©er un DataFrame pour Plotly
    df = pd.DataFrame({
        "Source": list(source_counts.keys()),
        "Nombre de documents": list(source_counts.values())
    })
    
    # Trier par nombre de documents
    df = df.sort_values("Nombre de documents", ascending=False)
    
    # Cr√©er le graphique
    fig = px.bar(
        df, 
        x="Source", 
        y="Nombre de documents",
        color="Source",
        color_discrete_sequence=px.colors.qualitative.Pastel,
        labels={"Source": "Source", "Nombre de documents": "Nombre de documents"}
    )
    
    # Personnaliser le graphique
    fig.update_layout(
        plot_bgcolor="white",
        xaxis_title="",
        yaxis_title="Nombre de documents",
        xaxis={'categoryorder':'total descending'}
    )
    
    return fig

def display_metrics(metadata, results=None):
    """Affiche les m√©triques principales"""
    st.markdown("""
    <div class="metrics-container">
        <div class="metric-card">
            <div class="metric-value">{}</div>
            <div class="metric-label">Documents</div>
        </div>
        <div class="metric-card">
            <div class="metric-value">{}</div>
            <div class="metric-label">Sources</div>
        </div>
        <div class="metric-card">
            <div class="metric-value">{}</div>
            <div class="metric-label">Secteurs</div>
        </div>
        <div class="metric-card">
            <div class="metric-value">{}</div>
            <div class="metric-label">R√©sultats</div>
        </div>
    </div>
    """.format(
        len(metadata),
        len(set(item["source"] for item in metadata)),
        len(set(item.get("sector", "Non sp√©cifi√©") for item in metadata)),
        len(results) if results else 0
    ), unsafe_allow_html=True)

# Interface principale
def main():
    # Afficher le header
    st.markdown('<div class="main-header">üõ°Ô∏è GAIN</div>', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">GenAISafety Agentic Intelligence Network</div>', unsafe_allow_html=True)
    
    # Charger le mod√®le et les donn√©es
    model = load_model()
    embeddings, metadata, index, sources, sectors = load_data()
    
    # Barre lat√©rale pour les filtres
    with st.sidebar:
        st.markdown('<div class="sidebar-header">Filtres de recherche</div>', unsafe_allow_html=True)
        
        # Filtre par source
        st.markdown("**Sources**")
        selected_sources = []
        for source in sources:
            if st.checkbox(source, value=True, key=f"source_{source}"):
                selected_sources.append(source)
        
        # Filtre par secteur (si disponible)
        if sectors:
            st.markdown("**Secteurs**")
            selected_sectors = []
            for sector in sectors:
                if st.checkbox(sector, value=True, key=f"sector_{sector}"):
                    selected_sectors.append(sector)
        else:
            selected_sectors = None
        
        # Nombre de r√©sultats
        top_k = st.slider("Nombre de r√©sultats", min_value=5, max_value=50, value=10, step=5)
        
        # Informations sur les donn√©es
        st.markdown("---")
        st.markdown('<div class="sidebar-header">Statistiques</div>', unsafe_allow_html=True)
        st.markdown(f"**Total documents:** {len(metadata)}")
        st.markdown(f"**Sources uniques:** {len(sources)}")
        if sectors:
            st.markdown(f"**Secteurs uniques:** {len(sectors)}")
        
        # Afficher un graphique de distribution des sources
        st.markdown("---")
        st.markdown('<div class="sidebar-header">Distribution des sources</div>', unsafe_allow_html=True)
        fig = display_source_distribution(metadata, selected_sources)
        st.plotly_chart(fig, use_container_width=True)
    
    # Barre de recherche
    query = st.text_input("Rechercher dans la base de connaissances SST...", placeholder="Ex: pr√©vention des chutes, √©quipements de protection, risques chimiques...")
    
    # Afficher les r√©sultats de recherche
    results = []
    if query:
        with st.spinner("Recherche en cours..."):
            results = search_documents(
                query=query,
                index=index,
                metadata=metadata,
                model=model,
                top_k=top_k,
                source_filter=selected_sources,
                sector_filter=selected_sectors if 'selected_sectors' in locals() else None
            )
        
        # Afficher les m√©triques
        display_metrics(metadata, results)
        
        # Afficher les r√©sultats
        st.markdown('<div class="sub-header">R√©sultats</div>', unsafe_allow_html=True)
        format_results(results, query)
    else:
        # Afficher les m√©triques initiales
        display_metrics(metadata)
        
        # Afficher un message d'accueil
        st.info("üëã Bienvenue dans GAIN (GenAISafety Agentic Intelligence Network) pour la recherche SST Qu√©bec. "
                "Entrez votre requ√™te dans la barre de recherche pour explorer la base de connaissances.")
        
        # Afficher quelques exemples de recherche
        st.markdown("### Exemples de recherche")
        example_queries = [
            "pr√©vention des chutes",
            "√©quipements de protection individuelle",
            "risques chimiques",
            "ergonomie au travail",
            "formation s√©curit√©"
        ]
        
        cols = st.columns(len(example_queries))
        for i, col in enumerate(cols):
            if col.button(example_queries[i]):
                st.experimental_rerun()  # Cette fonction est d√©pr√©ci√©e mais encore fonctionnelle, √† remplacer par st.rerun() dans les versions r√©centes de Streamlit
    
    # Footer
    st.markdown("""
    <div class="footer">
        GAIN (GenAISafety Agentic Intelligence Network) | Interface de recherche s√©mantique SST Qu√©bec | ¬© 2025
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()